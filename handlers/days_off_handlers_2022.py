import math

from aiogram import types, F
from aiogram.fsm.context import FSMContext

from keyboards.welcome_keyboard import keyboard_go_back, work_on_days_off_2022
from system.global_variables import jan_22, feb_22, mar_22, apr_22, may_22, june_22, jul_22, aug_22, sep_22, oct_22, \
    nov_22, dec_22
from system.system import dp, bot, router


@router.callback_query(F.data == "days_off_22")
async def days_off_callback_month(callback_query: types.CallbackQuery):
    """–ü–ª–∞–Ω–æ–≤—ã–µ –∏ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ 2022 –≥–æ–¥—É"""
    await bot.send_message(callback_query.from_user.id, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=work_on_days_off_2022())

@router.callback_query(F.data == "working_days_per_year_2022")
async def working_days_per_year_process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –Ø–Ω–≤–∞—Ä–µ 2022"""
    selected_month = callback_query.data
    await state.update_data(month=selected_month)

    jan_2022 = 19  # 01
    feb_2022 = 19  # 02
    mar_2022 = 21  # 03
    apr_2022 = 20  # 04
    may_2022 = 17  # 05
    jun_2022 = 20  # 06
    jul_2022 = 20  # 07
    aug_2022 = 23  # 08
    sep_2022 = 22  # 09
    oct_2022 = 21  # 10
    nov_2022 = 21  # 11
    dec_2022 = 22  # 12
    days_all = (jan_2022 + feb_2022 + mar_2022 + apr_2022 + may_2022 + jun_2022 +
                jul_2022 + aug_2022 + sep_2022 + oct_2022 + nov_2022 + dec_2022)
    markup = keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response_message = callback_query.message
    await response_message.answer(f"<code>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ 2022 –≥–æ–¥—É</code>\n"
                                  f"\n<code>–Ø–Ω–≤–∞—Ä—å: {jan_2022}</code>\n"
                                  f"<code>–§–µ–≤—Ä–∞–ª—å: {feb_2022}</code>\n"
                                  f"<code>–ú–∞—Ä—Ç: {mar_2022}</code>\n"
                                  f"<code>–ê–ø—Ä–µ–ª—å: {apr_2022}</code>\n"
                                  f"<code>–ú–∞–π: {may_2022}</code>\n"
                                  f"<code>–ò—é–Ω—å: {jun_2022}</code>\n"
                                  f"<code>–ò—é–ª—å: {jul_2022}</code>\n"
                                  f"<code>–ê–≤–≥—É—Å—Ç: {aug_2022}</code>\n"
                                  f"<code>–°–µ–Ω—Ç—è–±—Ä—å: {sep_2022}</code>\n"
                                  f"<code>–û–∫—Ç—è–±—Ä—å: {oct_2022}</code>\n"
                                  f"<code>–ù–æ—è–±—Ä—å: {nov_2022}</code>\n"
                                  f"<code>–î–µ–∫–∞–±—Ä—å: {dec_2022}</code>\n"
                                  f"\n<code>–í—Å–µ–≥–æ: {days_all}</code>\n"
                                  f"\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", parse_mode="HTML", reply_markup=markup)
    await state.clear()

@router.callback_query(F.data == "jan_days_off_2022")
async def days_off_process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –Ø–Ω–≤–∞—Ä–µ 2022"""
    selected_month = callback_query.data
    await state.update_data(month=selected_month)

    norm_working_days = 19
    norm_working_hours = norm_working_days * 8
    norm_hours_12h_shift = math.ceil(norm_working_hours / 12)
    norm_hours_24h_shift = math.ceil(norm_working_hours / 24)

    markup = keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response_message = callback_query.message
    await response_message.answer(f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–æ–≤ –≤ {jan_22}:</code><b> {norm_working_days}</b>\n"
                                  f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ {jan_22}:</code><b> {norm_working_days * 8}</b>\n"
                                  f"\n<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 6 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 8 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 12 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_12h_shift}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 24 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_24h_shift}</b>\n"
                                  f"\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", parse_mode="HTML", reply_markup=markup)
    await state.clear()

@router.callback_query(F.data == "feb_days_off_2022")
async def days_off_process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –§–µ–≤—Ä–∞–ª–µ 2022"""
    selected_month = callback_query.data
    await state.update_data(month=selected_month)

    norm_working_days = 19
    norm_working_hours = norm_working_days * 8
    norm_hours_12h_shift = math.ceil(norm_working_hours / 12)
    norm_hours_24h_shift = math.ceil(norm_working_hours / 24)
    markup = keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response_message = callback_query.message
    await response_message.answer(f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–æ–≤ –≤ {feb_22}:</code><b> {norm_working_days}</b>\n"
                                  f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ {feb_22}:</code><b> {norm_working_days * 8}</b>\n"
                                  f"\n<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 6 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 8 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 12 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_12h_shift}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 24 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_24h_shift}</b>\n"
                                  f"\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", parse_mode="HTML", reply_markup=markup)
    await state.clear()

@router.callback_query(F.data == "mar_days_off_2022")
async def days_off_process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –ú–∞—Ä—Ç–µ 2022"""
    selected_month = callback_query.data
    await state.update_data(month=selected_month)

    norm_working_days = 21
    norm_working_hours = norm_working_days * 8
    norm_hours_12h_shift = math.ceil(norm_working_hours / 12)
    norm_hours_24h_shift = math.ceil(norm_working_hours / 24)
    markup = keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response_message = callback_query.message
    await response_message.answer(f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–æ–≤ –≤ {mar_22}:</code><b> {norm_working_days}</b>\n"
                                  f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ {mar_22}:</code><b> {norm_working_days * 8}</b>\n"
                                  f"\n<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 6 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 8 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 12 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_12h_shift}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 24 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_24h_shift}</b>\n"
                                  f"\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", parse_mode="HTML", reply_markup=markup)
    await state.clear()

@router.callback_query(F.data == "apr_days_off_2022")
async def days_off_process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –ê–ø—Ä–µ–ª–µ 2022"""
    selected_month = callback_query.data
    await state.update_data(month=selected_month)

    norm_working_days = 20
    norm_working_hours = norm_working_days * 8
    norm_hours_12h_shift = math.ceil(norm_working_hours / 12)
    norm_hours_24h_shift = math.ceil(norm_working_hours / 24)
    markup = keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response_message = callback_query.message
    await response_message.answer(f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–æ–≤ –≤ {apr_22}:</code><b> {norm_working_days}</b>\n"
                                  f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ {apr_22}:</code><b> {norm_working_days * 8}</b>\n"
                                  f"\n<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 6 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 8 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 12 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_12h_shift}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 24 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_24h_shift}</b>\n"
                                  f"\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", parse_mode="HTML", reply_markup=markup)
    await state.clear()

@router.callback_query(F.data == "may_days_off_2022")
async def days_off_process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –ú–∞–µ 2022"""
    selected_month = callback_query.data
    await state.update_data(month=selected_month)

    norm_working_days = 17
    norm_working_hours = norm_working_days * 8
    norm_hours_12h_shift = math.ceil(norm_working_hours / 12)
    norm_hours_24h_shift = math.ceil(norm_working_hours / 24)
    markup = keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response_message = callback_query.message
    await response_message.answer(f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–æ–≤ –≤ {may_22}:</code><b> {norm_working_days}</b>\n"
                                  f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ {may_22}:</code><b> {norm_working_days * 8}</b>\n"
                                  f"\n<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 6 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 8 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 12 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_12h_shift}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 24 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_24h_shift}</b>\n"
                                  f"\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", parse_mode="HTML", reply_markup=markup)
    await state.clear()

@router.callback_query(F.data == "june_days_off_2022")
async def days_off_process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –ò—é–Ω–µ 2022"""
    selected_month = callback_query.data
    await state.update_data(month=selected_month)

    norm_working_days = 20
    norm_working_hours = norm_working_days * 8
    norm_hours_12h_shift = math.ceil(norm_working_hours / 12)
    norm_hours_24h_shift = math.ceil(norm_working_hours / 24)
    markup = keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response_message = callback_query.message
    await response_message.answer(f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–æ–≤ –≤ {june_22}:</code><b> {norm_working_days}</b>\n"
                                  f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ {june_22}:</code><b> {norm_working_days * 8}</b>\n"
                                  f"\n<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 6 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 8 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 12 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_12h_shift}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 24 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_24h_shift}</b>\n"
                                  f"\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", parse_mode="HTML", reply_markup=markup)
    await state.clear()

@router.callback_query(F.data == "jul_days_off_2022")
async def days_off_process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –ò—é–ª–µ 2022"""
    selected_month = callback_query.data
    await state.update_data(month=selected_month)

    norm_working_days = 20
    norm_working_hours = norm_working_days * 8
    norm_hours_12h_shift = math.ceil(norm_working_hours / 12)
    norm_hours_24h_shift = math.ceil(norm_working_hours / 24)
    markup = keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response_message = callback_query.message
    await response_message.answer(f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–æ–≤ –≤ {jul_22}:</code><b> {norm_working_days}</b>\n"
                                  f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ {jul_22}:</code><b> {norm_working_days * 8}</b>\n"
                                  f"\n<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 6 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 8 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 12 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_12h_shift}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 24 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_24h_shift}</b>\n"
                                  f"\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", parse_mode="HTML", reply_markup=markup)
    await state.clear()

@router.callback_query(F.data == "aug_days_off_2022")
async def days_off_process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –ê–≤–≥—É—Å—Ç–µ 2022"""
    selected_month = callback_query.data
    await state.update_data(month=selected_month)

    norm_working_days = 23
    norm_working_hours = norm_working_days * 8
    norm_hours_12h_shift = math.ceil(norm_working_hours / 12)
    norm_hours_24h_shift = math.ceil(norm_working_hours / 24)
    markup = keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response_message = callback_query.message
    await response_message.answer(f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–æ–≤ –≤ {aug_22}:</code><b> {norm_working_days}</b>\n"
                                  f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ {aug_22}:</code><b> {norm_working_days * 8}</b>\n"
                                  f"\n<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 6 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 8 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 12 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_12h_shift}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 24 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_24h_shift}</b>\n"
                                  f"\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", parse_mode="HTML", reply_markup=markup)
    await state.clear()

@router.callback_query(F.data == "sep_days_off_2022")
async def days_off_process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –°–µ–Ω—Ç—è–±—Ä–µ 2022"""
    selected_month = callback_query.data
    await state.update_data(month=selected_month)

    norm_working_days = 22
    norm_working_hours = norm_working_days * 8
    norm_hours_12h_shift = math.ceil(norm_working_hours / 12)
    norm_hours_24h_shift = math.ceil(norm_working_hours / 24)
    markup = keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response_message = callback_query.message
    await response_message.answer(f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–æ–≤ –≤ {sep_22}:</code><b> {norm_working_days}</b>\n"
                                  f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ {sep_22}:</code><b> {norm_working_days * 8}</b>\n"
                                  f"\n<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 6 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 8 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 12 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_12h_shift}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 24 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_24h_shift}</b>\n"
                                  f"\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", parse_mode="HTML", reply_markup=markup)
    await state.clear()

@router.callback_query(F.data == "oct_days_off_2022")
async def days_off_process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –û–∫—Ç—è–±—Ä–µ 2022"""
    selected_month = callback_query.data
    await state.update_data(month=selected_month)

    norm_working_days = 21
    norm_working_hours = norm_working_days * 8
    norm_hours_12h_shift = math.ceil(norm_working_hours / 12)
    norm_hours_24h_shift = math.ceil(norm_working_hours / 24)
    markup = keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response_message = callback_query.message
    await response_message.answer(f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–æ–≤ –≤ {oct_22}:</code><b> {norm_working_days}</b>\n"
                                  f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ {oct_22}:</code><b> {norm_working_days * 8}</b>\n"
                                  f"\n<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 6 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 8 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 12 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_12h_shift}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 24 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_24h_shift}</b>\n"
                                  f"\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", parse_mode="HTML", reply_markup=markup)
    await state.clear()

@router.callback_query(F.data == "nov_days_off_2022")
async def days_off_process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –ù–æ—è–±—Ä–µ 2022"""
    selected_month = callback_query.data
    await state.update_data(month=selected_month)

    norm_working_days = 21
    norm_working_hours = norm_working_days * 8
    norm_hours_12h_shift = math.ceil(norm_working_hours / 12)
    norm_hours_24h_shift = math.ceil(norm_working_hours / 24)
    markup = keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response_message = callback_query.message
    await response_message.answer(f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–æ–≤ –≤ {nov_22}:</code><b> {norm_working_days}</b>\n"
                                  f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ {nov_22}:</code><b> {norm_working_days * 8}</b>\n"
                                  f"\n<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 6 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 8 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 12 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_12h_shift}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 24 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_24h_shift}</b>\n"
                                  f"\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", parse_mode="HTML", reply_markup=markup)
    await state.clear()

@router.callback_query(F.data == "dec_days_off_2022")
async def days_off_process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –î–µ–∫–∞–±—Ä–µ 2022"""
    selected_month = callback_query.data
    await state.update_data(month=selected_month)

    norm_working_days = 22
    norm_working_hours = norm_working_days * 8
    norm_hours_12h_shift = math.ceil(norm_working_hours / 12)
    norm_hours_24h_shift = math.ceil(norm_working_hours / 24)
    markup = keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response_message = callback_query.message
    await response_message.answer(f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–æ–≤ –≤ {dec_22}:</code><b> {norm_working_days}</b>\n"
                                  f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ {dec_22}:</code><b> {norm_working_days * 8}</b>\n"
                                  f"\n<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 6 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 8 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 12 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_12h_shift}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 24 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_24h_shift}</b>\n"
                                  f"\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", parse_mode="HTML", reply_markup=markup)
    await state.clear()


def day_off_handler_22():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å"""
    dp.register_message_handler(days_off_callback_month)
