import codecs
import json

from aiogram import types, F
from aiogram.fsm.context import FSMContext
from loguru import logger

from handlers.days_off_handlers_2024 import counting_working_days
from keyboards.welcome_keyboard import keyboard_go_back, work_on_days_off_2025
from system.system import dp, bot, router


def reading_JSON_file():
    """–°—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –¥–∞—Ç–∞–º–∏"""
    with codecs.open('settings/days_off_2025.json', 'rb') as f:
        data = json.load(f)
        logger.info(data)
    return data


def list_of_weekends_for_a_month(data, month_json, norm_working_hours, norm_hours_12h_shift,
                                 norm_hours_24h_shift):
    """"–°–ø–∏—Å–æ–∫ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ"""
    try:
        text = (
            f'\n{data[f"{month_json}"][0]}\n'

            f'\n<code>‚úÖ –ù–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–æ–≤:</code><b> {data[f"{month_json}"][1]}</b>'
            f'\n<code>‚úÖ –ù–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–∏:</code><b> {norm_working_hours}</b>'
            # f'\n<code>üìÖ –í—ã—Ö–æ–¥–Ω—ã–µ:</code><b>13, 14, 20, 21, 27, 28</b>'
            f'\n\n<code>üìÖ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ:</code><b> {data[f"{month_json}"][2]}</b>'
            # f'\n<code>üìÖ –í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏:</code><b>1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 20, 21, 27, 28</b>'
            f'\n\n<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 6 —á–∞—Å–æ–≤—ã—Ö:</code><b> {data[f"{month_json}"][1]}</b>'
            f'\n<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 8 —á–∞—Å–æ–≤—ã—Ö:</code><b> {data[f"{month_json}"][1]}</b>'
            f'\n<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 12 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_12h_shift}</b>'
            f'\n<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 24 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_24h_shift}</b>\n'

            f'\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ'
        )
        return text
    except Exception as e:
        logger.exception(e)


@router.callback_query(F.data == "days_off_25")
async def days_off_callback_month_2025(callback_query: types.CallbackQuery):
    """–ü–ª–∞–Ω–æ–≤—ã–µ –∏ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ 2025"""
    try:
        data = reading_JSON_file()
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,
            text=f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –î–ù–† –Ω–∞ 2025 –≥–æ–¥"
                 "\n\nüìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
            reply_markup=work_on_days_off_2025(data)
        )
    except Exception as e:
        logger.error(e)


@router.callback_query(F.data == "working_days_per_year_2025")
async def working_days_per_year_process_callback_2025(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –Ø–Ω–≤–∞—Ä–µ 2025"""
    try:
        await state.update_data(month=callback_query.data)
        data = reading_JSON_file()
        days_all = (int(data["jan_2025"][1]) + int(data["feb_2025"][1]) + int(data["mar_2025"][1]) + int(
            data["apr_2025"][1]) + int(data["may_2025"][1]) + int(data["june_2025"][1]) +
                    int(data["jul_2025"][1]) + int(data["aug_2025"][1]) + int(data["sep_2025"][1]) + int(
                    data["oct_2025"][1]) + int(data["nov_2025"][1]) + int(data["dec_2025"][1]))
        markup = keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
        # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response_message = callback_query.message
        await response_message.answer(f'<code>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ 2025 –≥–æ–¥—É</code>\n'
                                      f'\n<code>–Ø–Ω–≤–∞—Ä—å: {data["jan_2025"][1]}</code>\n'
                                      f'<code>–§–µ–≤—Ä–∞–ª—å: {data["feb_2025"][1]}</code>\n'
                                      f'<code>–ú–∞—Ä—Ç: {data["mar_2025"][1]}</code>\n'
                                      f'<code>–ê–ø—Ä–µ–ª—å: {data["apr_2025"][1]}</code>\n'
                                      f'<code>–ú–∞–π: {data["may_2025"][1]}</code>\n'
                                      f'<code>–ò—é–Ω—å: {data["june_2025"][1]}</code>\n'
                                      f'<code>–ò—é–ª—å: {data["jul_2025"][1]}</code>\n'
                                      f'<code>–ê–≤–≥—É—Å—Ç: {data["aug_2025"][1]}</code>\n'
                                      f'<code>–°–µ–Ω—Ç—è–±—Ä—å: {data["sep_2025"][1]}</code>\n'
                                      f'<code>–û–∫—Ç—è–±—Ä—å: {data["oct_2025"][1]}</code>\n'
                                      f'<code>–ù–æ—è–±—Ä—å: {data["nov_2025"][1]}</code>\n'
                                      f'<code>–î–µ–∫–∞–±—Ä—å: {data["dec_2025"][1]}</code>\n'
                                      f'\n<code>–í—Å–µ–≥–æ: {days_all}</code>\n'
                                      f'\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ', parse_mode="HTML",
                                      reply_markup=markup)
        await state.clear()
    except Exception as e:
        logger.error(e)


@router.callback_query(F.data == "jan_days_off_2025")
async def days_off_process_callback_monthh_2025(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –Ø–Ω–≤–∞—Ä–µ 2025"""
    try:
        await state.update_data(month=callback_query.data)
        data = reading_JSON_file()
        norm_working_hours, norm_hours_12h_shift, norm_hours_24h_shift = counting_working_days(data["jan_2025"][1])
        # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = list_of_weekends_for_a_month(data, 'jan_2025', norm_working_hours, norm_hours_12h_shift,
                                            norm_hours_24h_shift)
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,
            text=text, parse_mode="HTML",
            reply_markup=keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
        )
        await state.clear()
    except Exception as e:
        logger.exception(e)


@router.callback_query(F.data == "feb_days_off_2025")
async def days_off_process_callback_monthh_2025(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –§–µ–≤—Ä–∞–ª–µ 2025"""
    await state.update_data(month=callback_query.data)
    data = reading_JSON_file()
    norm_working_hours, norm_hours_12h_shift, norm_hours_24h_shift = counting_working_days(data["feb_2025"][1])
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = list_of_weekends_for_a_month(data, 'feb_2025', norm_working_hours, norm_hours_12h_shift,
                                        norm_hours_24h_shift)
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,
        text=text, parse_mode="HTML",
        reply_markup=keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    )
    await state.clear()


@router.callback_query(F.data == "mar_days_off_2025")
async def days_off_process_callback_monthh_2025(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –ú–∞—Ä—Ç–µ 2025"""
    await state.update_data(month=callback_query.data)
    data = reading_JSON_file()
    norm_working_hours, norm_hours_12h_shift, norm_hours_24h_shift = counting_working_days(data["mar_2025"][1])
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = list_of_weekends_for_a_month(data, 'mar_2025', norm_working_hours, norm_hours_12h_shift,
                                        norm_hours_24h_shift)
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,
        text=text, parse_mode="HTML",
        reply_markup=keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    )
    await state.clear()


@router.callback_query(F.data == "apr_days_off_2025")
async def days_off_process_callback_monthh_2025(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –ê–ø—Ä–µ–ª–µ 2025"""
    await state.update_data(month=callback_query.data)
    data = reading_JSON_file()
    norm_working_hours, norm_hours_12h_shift, norm_hours_24h_shift = counting_working_days(data["apr_2025"][1])
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = list_of_weekends_for_a_month(data, 'apr_2025', norm_working_hours, norm_hours_12h_shift,
                                        norm_hours_24h_shift)
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,
        text=text, parse_mode="HTML",
        reply_markup=keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    )
    await state.clear()


@router.callback_query(F.data == "may_days_off_2025")
async def days_off_process_callback_monthh_2025(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –ú–∞–µ 2025"""
    await state.update_data(month=callback_query.data)
    data = reading_JSON_file()
    norm_working_hours, norm_hours_12h_shift, norm_hours_24h_shift = counting_working_days(data["may_2025"][1])
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = list_of_weekends_for_a_month(data, 'may_2025', norm_working_hours, norm_hours_12h_shift,
                                        norm_hours_24h_shift)
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,
        text=text, parse_mode="HTML",
        reply_markup=keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    )
    await state.clear()


@router.callback_query(F.data == "june_days_off_2025")
async def days_off_process_callback_monthh_2025(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –ò—é–Ω–µ 2025"""
    await state.update_data(month=callback_query.data)
    data = reading_JSON_file()
    norm_working_hours, norm_hours_12h_shift, norm_hours_24h_shift = counting_working_days(data["june_2025"][1])
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = list_of_weekends_for_a_month(data, 'june_2025', norm_working_hours, norm_hours_12h_shift,
                                        norm_hours_24h_shift)
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,
        text=text, parse_mode="HTML",
        reply_markup=keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    )
    await state.clear()


@router.callback_query(F.data == "jul_days_off_2025")
async def days_off_process_callback_monthh_2025(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –ò—é–ª–µ 2025"""
    await state.update_data(month=callback_query.data)
    data = reading_JSON_file()
    norm_working_hours, norm_hours_12h_shift, norm_hours_24h_shift = counting_working_days(data["jul_2025"][1])
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = list_of_weekends_for_a_month(data, 'jul_2025', norm_working_hours, norm_hours_12h_shift,
                                        norm_hours_24h_shift)
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,
        text=text, parse_mode="HTML",
        reply_markup=keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    )
    await state.clear()


@router.callback_query(F.data == "aug_days_off_2025")
async def days_off_process_callback_monthh_2025(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –ê–≤–≥—É—Å—Ç–µ 2025"""
    await state.update_data(month=callback_query.data)
    data = reading_JSON_file()
    norm_working_hours, norm_hours_12h_shift, norm_hours_24h_shift = counting_working_days(data["aug_2025"][1])
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = list_of_weekends_for_a_month(data, 'aug_2025', norm_working_hours, norm_hours_12h_shift,
                                        norm_hours_24h_shift)
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,
        text=text, parse_mode="HTML",
        reply_markup=keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    )
    await state.clear()


@router.callback_query(F.data == "sep_days_off_2025")
async def days_off_process_callback_monthh_2025(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –°–µ–Ω—Ç—è–±—Ä–µ 2025"""
    await state.update_data(month=callback_query.data)
    data = reading_JSON_file()
    norm_working_hours, norm_hours_12h_shift, norm_hours_24h_shift = counting_working_days(data["sep_2025"][1])
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = list_of_weekends_for_a_month(data, 'sep_2025', norm_working_hours, norm_hours_12h_shift,
                                        norm_hours_24h_shift)
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,
        text=text, parse_mode="HTML",
        reply_markup=keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    )
    await state.clear()


@router.callback_query(F.data == "oct_days_off_2025")
async def days_off_process_callback_monthh_2025(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –û–∫—Ç—è–±—Ä–µ 2025"""
    await state.update_data(month=callback_query.data)
    data = reading_JSON_file()
    norm_working_hours, norm_hours_12h_shift, norm_hours_24h_shift = counting_working_days(data["oct_2025"][1])
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = list_of_weekends_for_a_month(data, 'oct_2025', norm_working_hours, norm_hours_12h_shift,
                                        norm_hours_24h_shift)
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,
        text=text, parse_mode="HTML",
        reply_markup=keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    )
    await state.clear()


@router.callback_query(F.data == "nov_days_off_2025")
async def days_off_process_callback_monthh_2025(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –ù–æ—è–±—Ä–µ 2025"""
    await state.update_data(month=callback_query.data)
    data = reading_JSON_file()
    norm_working_hours, norm_hours_12h_shift, norm_hours_24h_shift = counting_working_days(data["nov_2025"][1])
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = list_of_weekends_for_a_month(data, 'nov_2025', norm_working_hours, norm_hours_12h_shift,
                                        norm_hours_24h_shift)
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,
        text=text, parse_mode="HTML",
        reply_markup=keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    )
    await state.clear()


@router.callback_query(F.data == "dec_days_off_2025")
async def days_off_process_callback_monthh_2025(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –î–µ–∫–∞–±—Ä–µ 2025"""
    await state.update_data(month=callback_query.data)
    data = reading_JSON_file()
    norm_working_hours, norm_hours_12h_shift, norm_hours_24h_shift = counting_working_days(data["dec_2025"][1])
    text = list_of_weekends_for_a_month(data, 'dec_2025', norm_working_hours, norm_hours_12h_shift,
                                        norm_hours_24h_shift)
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,
        text=text, parse_mode="HTML",
        reply_markup=keyboard_go_back()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    )
    await state.clear()


def register_days_off_callback_month_handler_2025():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –±–æ—Ç–∞"""
    dp.register_message_handler(days_off_callback_month_2025)
