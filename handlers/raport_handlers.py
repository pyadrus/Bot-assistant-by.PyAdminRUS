import os
import sqlite3

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import InputFile

from system.global_variables import *
from system.system import dp, bot


@dp.callback_query_handler(lambda c: c.data in ['rap'])
async def process_callback_month(callback_query: types.CallbackQuery):
    """–ö–Ω–æ–ø–∫–∏ —Å –º–µ—Å—è—Ü–∞–º–∏ —Ä–∞–ø–æ—Ä—Ç–∞"""
    keyboard = InlineKeyboardMarkup()
    jan_button = InlineKeyboardButton(text=f'‚úÖ {jan}', callback_data='01_jan_rap')
    feb_button = InlineKeyboardButton(text=f'‚úÖ {feb}', callback_data='02_feb_rap')
    mar_button = InlineKeyboardButton(text=f'‚úÖ {mar}', callback_data='03_mar_rap')
    apr_button = InlineKeyboardButton(text=f'‚úÖ {apr}', callback_data='04_apr_rap')
    may_button = InlineKeyboardButton(text=f'‚úÖ {may}', callback_data='05_may_rap')
    jun_button = InlineKeyboardButton(text=f'‚úÖ {june}', callback_data='06_jun_rap')
    jul_button = InlineKeyboardButton(text=f'‚úÖ {jul}', callback_data='07_jul_rap')
    aug_button = InlineKeyboardButton(text=f'‚úÖ {aug}', callback_data='08_aug_rap')
    sep_button = InlineKeyboardButton(text=f'{sep}', callback_data='09_sep_rap')
    oct_button = InlineKeyboardButton(text=f'{oct}', callback_data='10_oct_rap')
    nov_button = InlineKeyboardButton(text=f'{nov}', callback_data='11_nov_rap')
    dec_button = InlineKeyboardButton(text=f'{dec}', callback_data='12_dec_rap')
    keyboard.row(jan_button, feb_button, mar_button)
    keyboard.row(apr_button, may_button, jun_button)
    keyboard.row(jul_button, aug_button, sep_button)
    keyboard.row(oct_button, nov_button, dec_button)
    await bot.send_message(callback_query.from_user.id, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data in ['01_jan_rap'])
async def process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–†–∞–ø–æ—Ä—Ç–∞ –ú–∞—Ä—Ç 2023"""
    month = callback_query.data
    await state.update_data(month=month)
    await Form.district.set()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É—á–∞—Å—Ç–∫–∞:")


@dp.callback_query_handler(lambda c: c.data in ['02_feb_rap'])
async def process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–†–∞–ø–æ—Ä—Ç–∞ –ú–∞—Ä—Ç 2023"""
    month = callback_query.data
    await state.update_data(month=month)
    await Form.district.set()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É—á–∞—Å—Ç–∫–∞:")


@dp.callback_query_handler(lambda c: c.data in ['03_mar_rap'])
async def process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–†–∞–ø–æ—Ä—Ç–∞ –ú–∞—Ä—Ç 2023"""
    month = callback_query.data
    await state.update_data(month=month)
    await Form.district.set()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É—á–∞—Å—Ç–∫–∞:")


@dp.callback_query_handler(lambda c: c.data in ['04_apr_rap'])
async def process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–†–∞–ø–æ—Ä—Ç–∞ –ú–∞—Ä—Ç 2023"""
    month = callback_query.data
    await state.update_data(month=month)
    await Form.district.set()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É—á–∞—Å—Ç–∫–∞:")


@dp.callback_query_handler(lambda c: c.data in ['05_may_rap'])
async def process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–†–∞–ø–æ—Ä—Ç–∞ –ú–∞—Ä—Ç 2023"""
    month = callback_query.data
    await state.update_data(month=month)
    await Form.district.set()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É—á–∞—Å—Ç–∫–∞:")


@dp.callback_query_handler(lambda c: c.data in ['06_jun_rap'])
async def process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–†–∞–ø–æ—Ä—Ç–∞ –ú–∞—Ä—Ç 2023"""
    month = callback_query.data
    await state.update_data(month=month)
    await Form.district.set()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É—á–∞—Å—Ç–∫–∞:")


@dp.callback_query_handler(lambda c: c.data in ['07_jul_rap'])
async def process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–†–∞–ø–æ—Ä—Ç–∞ –ú–∞—Ä—Ç 2023"""
    month = callback_query.data
    await state.update_data(month=month)
    await Form.district.set()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É—á–∞—Å—Ç–∫–∞:")


@dp.callback_query_handler(lambda c: c.data in ['08_aug_rap'])
async def process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–†–∞–ø–æ—Ä—Ç–∞ –ú–∞—Ä—Ç 2023"""
    month = callback_query.data
    await state.update_data(month=month)
    await Form.district.set()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É—á–∞—Å—Ç–∫–∞:")


@dp.callback_query_handler(lambda c: c.data in ['09_sep_rap'])
async def process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–†–∞–ø–æ—Ä—Ç–∞ –ú–∞—Ä—Ç 2023"""
    month = callback_query.data
    await state.update_data(month=month)
    await Form.district.set()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É—á–∞—Å—Ç–∫–∞:")


@dp.callback_query_handler(lambda c: c.data in ['10_oct_rap'])
async def process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–†–∞–ø–æ—Ä—Ç–∞ –ú–∞—Ä—Ç 2023"""
    month = callback_query.data
    await state.update_data(month=month)
    await Form.district.set()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É—á–∞—Å—Ç–∫–∞:")


@dp.callback_query_handler(lambda c: c.data in ['11_nov_rap'])
async def process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–†–∞–ø–æ—Ä—Ç–∞ –ú–∞—Ä—Ç 2023"""
    month = callback_query.data
    await state.update_data(month=month)
    await Form.district.set()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É—á–∞—Å—Ç–∫–∞:")


@dp.callback_query_handler(lambda c: c.data in ['12_dec_rap'])
async def process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    """–†–∞–ø–æ—Ä—Ç–∞ –ú–∞—Ä—Ç 2023"""
    month = callback_query.data
    await state.update_data(month=month)
    await Form.district.set()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É—á–∞—Å—Ç–∫–∞:")


list_of_plots_2023 = {110100: "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", 110110: "–¢–µ—Ö.—Å–ª—É–∂–±–∞", 110120: "–ü—Ä–æ–∏–∑–≤–æ–¥.—Å–ª—É–∂–±–∞", 110130: "–¢–µ—Ö–Ω.—Å–ª—É–∂–±–∞",
                      110140: "–°–û–¢ –∏ –¢–ë", 110150: "–ú–∞—Ä–∫—à–µ–π–¥–µ—Ä—Å–∫–∞—è —Å–ª—É–∂–±–∞", 110160: "–ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞",
                      110170: "–≠–ú–°", 110191: "–ü–≠–û", 110192: "–û–û–¢–∏–ó–ü", 110193: "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–µ–∫—Ç–æ—Ä",
                      110200: "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", 110211: "–°–µ–∫—Ç–æ—Ä –¥–æ–≥–æ–≤–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã", 110220: "–°–µ–∫—Ç–æ—Ä –ú–¢–°", 110230: "–û–ö",
                      110240: "–°–µ–∫—Ç–æ—Ä –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º", 110250: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Å–µ–∫—Ç–æ—Ä", 120110: "–£—á.‚Ññ 1",
                      120210: "–£–ü–† ‚Ññ 1", 120220: "–£–ü–† ‚Ññ 2", 120400: "–£—á.–®–¢", 120410: "–£–ö–¢ ‚Ññ 1", 120420: "–£–ö–¢ ‚Ññ 2",
                      120500: "–£—á.–†–í–†", 120520: "–£—á.–†–í–† ‚Ññ2", 120610: "–£—á.–ú–î–ì–û ‚Ññ 1", 120700: "–í–¢–ë", 120800: "–£—á.–í–†",
                      120900: "–ü–†–¢–ë", 121000: "–í–æ–¥–æ–æ—Ç–ª–∏–≤", 121010: "–°—Ç–∞—Ü.–æ–±–æ—Ä—É–¥.‚Ññ1", 121020: "–°—Ç–∞—Ü.–æ–±–æ—Ä—É–¥ ‚Ññ2",
                      121030: "–≠–ª–µ–∫—Ç—Ä–æ—Ü–µ—Ö", 121040: "–†–ó–û", 121050: "–û–ú–ö", 121060: "–†–í–í", 121070: "–ö–æ—Ç–µ–ª—å–Ω–∞—è",
                      121100: "–û—Ç–¥–µ–ª —Ç–µ—Ö–Ω–∏—á-–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è —É–≥–ª—è", 121110: "–£—á–∞—Å—Ç–æ–∫ –ê–°–£–∏–¢–ü", 121200: "–°–≤—è–∑—å",
                      121400: "–ê–ë–ö", 121500: "–ó–¥—Ä–∞–≤–ø—É–Ω–∫—Ç", 121600: "–û—Ö—Ä–∞–Ω–∞", 121710: "–ê–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —É—á–∞—Å—Ç–æ–∫",
                      121730: "–£–§–ü–û", 121800: "–û–§", 121810: "–ò–¢–† –û–§", 121820: "–û–ü –û–§", 121830: "–≠–ª–µ–∫—Ç—Ä–æ—Ü–µ—Ö –û–§",
                      121840: "–ú–æ–Ω—Ç–∞–∂–Ω–æ-–¥–µ–º–æ–Ω—Ç–∞–∂–Ω–∞—è –≥—Ä—É–ø–ø–∞ –û–§", 121850: "–†–µ–º–æ–Ω—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –û–§",
                      121860: "–£–≥–ª–µ—Ö–∏–º–∏—á–µ—Å–∫–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –û–§", 121870: "–ê–ë–ö –û–§", 121900: "–°–ª—É–∂–±–∞ —Å–∫–ª–∞–¥—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞",
                      121940: "–°–∫–ª–∞–¥ ‚Ññ2", 121950: "–°–∫–ª–∞–¥ ‚Ññ3", 121960: "–°–∫–ª–∞–¥ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
                      121972: "–°–∫–ª–∞–¥ ‚Ññ4", 121970: "–£–≥–æ–ª—å–Ω—ã–π —Å–∫–ª–∞–¥", 121971: "–õ–µ—Å–Ω–æ–π —Å–∫–ª–∞–¥", 122100: "–ö–ì–≠–°",
                      122200: "–£—á.–ø–æ –∏–∑–≥ –∏ —Ä–µ–º.", 122400: "–£–°–ú–†", 130010: "–û–±—â–µ–∂–∏—Ç–∏–µ ‚Ññ1", 130020: "–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞ '–û–ª–∏–º–ø'",
                      130030: "–ü–¢–ö '–î–æ–Ω–µ—Ü–∫–∏–π'"}

report_no_text_found = ("üö´ <b>–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ä–∞–ø–æ—Ä—Ç –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.</b>\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ —É—á–∞—Å—Ç–∫–∞.\n\n"
                        "–ù–∞–∂–º–∏—Ç–µ <b>'‚Ü©Ô∏è  –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é'</b>, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")


@dp.message_handler(state=Form.district)
async def process_district(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        month = data['month']
        district = message.text
        try:
            district_name = list_of_plots_2023[int(district)]
            print(district_name)
            # –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            user_id = message.from_user.id
            username = message.from_user.username
            timestamp = str(message.date)
            file_name = district + '.xls'
            perform_database_operations(user_id, username, timestamp, file_name)
            # –ü–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
            file_path = f"raports/rap_2023/{month}_2023/{district}.xls"
            if os.path.isfile(file_path):
                with open(file_path, "rb") as file:
                    await message.answer_document(InputFile(file), caption=f"–†–∞–ø–æ—Ä—Ç —É—á–∞—Å—Ç–∫–∞: {district_name}")
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
                keyboard = create_feedback_and_return_to_menu_keyboard()
                await message.answer(report_no_text_found, reply_markup=keyboard)
        except KeyError:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
            keyboard = create_feedback_and_return_to_menu_keyboard()
            await message.answer(report_no_text_found, reply_markup=keyboard)
        await state.finish()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def perform_database_operations(user_id, username, timestamp, file_name):
    conn = sqlite3.connect('settings/database.db')
    cursor = conn.cursor()
    # –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute("""CREATE TABLE IF NOT EXISTS user_requests (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER,
                                                                username TEXT, timestamp TEXT, file_name TEXT)""")
    # –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
    cursor.execute("""INSERT INTO user_requests (user_id, username, timestamp, file_name) 
                      VALUES (?, ?, ?, ?)""", (user_id, username, timestamp, file_name))
    # –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn.commit()
    conn.close()


def create_feedback_and_return_to_menu_keyboard():
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup()
    feedback_button = InlineKeyboardButton(text='‚ÅâÔ∏è –ï—Å–ª–∏ —Ä–∞–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞–∂–º–∏—Ç–µ –¢–£–¢', callback_data='feedback')
    return_to_menu_button = InlineKeyboardButton(text='‚Ü©Ô∏è  –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é', callback_data='menu')
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    keyboard.add(feedback_button)
    keyboard.add(return_to_menu_button)
    return keyboard
