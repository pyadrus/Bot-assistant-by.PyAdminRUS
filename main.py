import configparser
import math

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from handlers import raport_handlers  # –†–∞–ø–æ—Ä—Ç–∞ (–Ω–µ —É–¥–∞–ª—è—Ç—å)
from system import dp, bot

config = configparser.ConfigParser(empty_lines_in_values=False, allow_no_value=True)
# –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞ config.ini
config.read("settings/config.ini")
bot_token = config.get('BOT_TOKEN', 'BOT_TOKEN')


class Form(StatesGroup):
    month = State()
    district = State()


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start"""
    main_keyboard = InlineKeyboardMarkup()
    raport_button = InlineKeyboardButton(text='üî®–†–∞–ø–æ—Ä—Ç–∞ 2023', callback_data='rap')
    days_off_button = InlineKeyboardButton(text='üìÖ –í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ 2023', callback_data='days_off')
    feedback_button = InlineKeyboardButton(text='‚ÅâÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –∑–∞–º–µ—á–∞–Ω–∏–µ', callback_data='feedback')
    main_keyboard.row(raport_button, days_off_button)
    main_keyboard.row(feedback_button)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:", reply_markup=main_keyboard)


class FeedbackState(StatesGroup):
    """–î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    WAITING_FOR_FEEDBACK = State()


@dp.callback_query_handler(lambda c: c.data in ['feedback'])
async def feedback_command_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º"""
    instructions = "–í–≤–µ–¥–∏—Ç–µ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å ‚ùì –°–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ‚ùóÔ∏è"
    await bot.send_message(chat_id=callback_query.from_user.id, text=instructions)
    await FeedbackState.WAITING_FOR_FEEDBACK.set()
    await state.update_data(user_id=callback_query.from_user.id, username=callback_query.from_user.username)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
@dp.message_handler(state=FeedbackState.WAITING_FOR_FEEDBACK, content_types=types.ContentType.TEXT)
async def feedback_message_handler(message: types.Message, state: FSMContext):
    user_feedback = message.text

    # –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    user_id = state_data.get("user_id")
    username = state_data.get("username")

    # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É Telegram
    group_id = -1001768846220  # –∑–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã
    feedback_message = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id}):\n\n{user_feedback}"
    await bot.send_message(chat_id=group_id, text=feedback_message)

    # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    confirmation_message = "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
    await bot.send_message(chat_id=user_id, text=confirmation_message)

    # —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ None
    await state.finish()


@dp.callback_query_handler(lambda c: c.data in ['days_off'])
async def days_off_callback_month(callback_query: types.CallbackQuery):
    """–ü–ª–∞–Ω–æ–≤—ã–µ –∏ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –≤ –ú–∞–µ 2023"""
    keyboard = InlineKeyboardMarkup()
    may_button = InlineKeyboardButton(text='üìÖ –ú–∞–π 2023', callback_data='may_days_off')
    june_button = InlineKeyboardButton(text='üìÖ –ò—é–Ω—å 2023', callback_data='june_days_off')
    keyboard.row(may_button, june_button)

    await bot.send_message(callback_query.from_user.id, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data in ['may_days_off'])
async def days_off_process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    selected_month = callback_query.data
    await state.update_data(month=selected_month)
    await Form.district.set()

    norm_working_days = 19
    norm_working_hours = norm_working_days * 8
    norm_hours_12h_shift = math.ceil(norm_working_hours / 12)
    norm_hours_24h_shift = math.ceil(norm_working_hours / 24)

    response_message = callback_query.message
    await response_message.answer(f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–æ–≤ –≤ –ú–∞–µ 2023:</code><b> {norm_working_days}</b>\n"
                                  f"\n<code>üìÖ –í—ã—Ö–æ–¥–Ω—ã–µ:</code><b> 6, 7, 8, 13, 14, 20, 21, 27, 28</b>\n"
                                  f"<code>üìÖ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ:</code><b> 1, 9, 11</b>\n"
                                  f"\n<code>üìÖ –í—ã—Ö–æ–¥–Ω—ã–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å:</code><b> 1, 6, 7, 8, 9, 10, 13, 14, 20, 21, 27, 28</b>\n"
                                  f"<code>üìÖ –í—ã—Ö–æ–¥–Ω—ã–µ –ø–æ–¥–∑–µ–º–Ω—ã–µ:</code><b>1, 3, 7, 8, 9, 11, 14, 17, 21, 24, 28</b>\n"
                                  f"\n<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 6 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 8 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 12 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_12h_shift}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 24 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_24h_shift}</b>\n"
                                  f"\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", parse_mode="HTML")

    await state.finish()


@dp.callback_query_handler(lambda c: c.data in ['june_days_off'])
async def days_off_process_callback_monthh(callback_query: types.CallbackQuery, state: FSMContext):
    selected_month = callback_query.data
    await state.update_data(month=selected_month)
    await Form.district.set()

    norm_working_days = 20
    norm_working_hours = norm_working_days * 8
    norm_hours_12h_shift = math.ceil(norm_working_hours / 12)
    norm_hours_24h_shift = math.ceil(norm_working_hours / 24)

    response_message = callback_query.message
    await response_message.answer(f"<code>‚úÖ –ù–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–æ–≤ –≤ –ò—é–Ω–µ 2023:</code><b> {norm_working_days}</b>\n"
                                  f"\n<code>üìÖ –í—ã—Ö–æ–¥–Ω—ã–µ:</code><b> 3, 5, 10, 11, 17, 18, 24, 25</b>\n"
                                  f"<code>üìÖ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ:</code><b> 4, 12</b>\n"
                                  f"\n<code>üìÖ –í—ã—Ö–æ–¥–Ω—ã–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å:</code><b> 3, 4, 5, 10, 11, 12, 17, 18, 24, 25</b>\n"
                                  f"<code>üìÖ –í—ã—Ö–æ–¥–Ω—ã–µ –ø–æ–¥–∑–µ–º–Ω—ã–µ:</code><b>4, 5, 7, 11, 12, 14, 18, 21, 25, 28</b>\n"
                                  f"\n<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 6 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 8 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_working_days}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 12 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_12h_shift}</b>\n"
                                  f"<code>üî® –í—ã—Ö–æ–¥–æ–≤ –¥–ª—è 24 —á–∞—Å–æ–≤—ã—Ö:</code><b> {norm_hours_24h_shift}</b>\n"
                                  f"\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", parse_mode="HTML")

    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
